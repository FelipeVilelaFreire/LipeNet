# =================================
# Python / Django
# =================================

# Byte-compiled / optimized / DLL files
__pycache__/
*.py[codz]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py.cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal
staticfiles/
media/
*.sqlite3
*.db

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# UV
#   Similar to Pipfile.lock, it is generally recommended to include uv.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#uv.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock
#poetry.toml

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#   pdm recommends including project-wide configuration in pdm.toml, but excluding .pdm-python.
#   https://pdm-project.org/en/latest/usage/project/#working-with-version-control
#pdm.lock
#pdm.toml
.pdm-python
.pdm-build/

# pixi
#   Similar to Pipfile.lock, it is generally recommended to include pixi.lock in version control.
#pixi.lock
#   Pixi creates a virtual environment in the .pixi directory, just like venv module creates one
#   in the .venv directory. It is recommended not to include this directory in version control.
.pixi

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.env.*
.envrc
.venv
env/
venv/
ENV/
env.bak/
venv.bak/
*.env

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# IDEs and Editors
.idea/
*.iml
*.iws
*.ipr
.vscode/
*.code-workspace
.project
.classpath
.c9/
*.launch
.settings/
*.sublime-workspace
*.sublime-project

# Abstra
# Abstra is an AI-powered process automation framework.
# Ignore directories containing user credentials, local state, and settings.
# Learn more at https://abstra.io/docs
.abstra/


# Claude Code - configurações locais do Claude
.claude/

# Ruff stuff:
.ruff_cache/

# PyPI configuration file
.pypirc

# Marimo
marimo/_static/
marimo/_lsp/
__marimo__/

# Streamlit
.streamlit/secrets.toml



# =================================
# Media Files
# =================================

# User uploaded files
media/
uploads/
static/media/

# Image files (if you want to exclude test images)
# *.jpg
# *.jpeg
# *.png
# *.gif
# *.bmp
# *.webp
# *.svg
# *.ico

# Video files
*.mp4
*.avi
*.mov
*.wmv
*.flv
*.mkv

# Audio files  
*.mp3
*.wav
*.flac
*.aac

# Document files
*.pdf
*.doc
*.docx
*.xls
*.xlsx
*.ppt
*.pptx

# Project specific
agenda.txt
analise_backend_fotos.txt
resources.txt
instrucoes.txt
referencia_visual/

# =================================
# Frontend (Node.js / React / Vite)
# =================================

# Dependencies
node_modules/
.pnp
.pnp.js

# Logs
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

# Production builds
dist/
dist-ssr/
build/
.output/
out/

# Environment variables
.env.local
.env.development.local
.env.test.local
.env.production.local
.env.development
.env.production
.env.test

# Cache and temporary files
.eslintcache
.stylelintcache
.vite-node-cache/
.cache/
.parcel-cache/
.temp/
.tmp/


# =================================
# Operating System Files
# =================================

# Windows
Thumbs.db
Thumbs.db:encryptable
ehthumbs.db
ehthumbs_vista.db
Desktop.ini
$RECYCLE.BIN/
*.cab
*.msi
*.msix
*.msm
*.msp
*.lnk

# macOS
.DS_Store
.AppleDouble
.LSOverride
Icon
._*
.DocumentRevisions-V100
.fseventsd
.Spotlight-V100
.TemporaryItems
.Trashes
.VolumeIcon.icns
.com.apple.timemachine.donotpresent
.AppleDB
.AppleDesktop
Network Trash Folder
Temporary Items
.apdisk

# Linux
*~
.fuse_hidden*
.directory
.Trash-*
.nfs*

# =================================
# Package managers
# =================================

# npm
npm-debug.log*
package-lock.json

# Yarn
yarn.lock
yarn-debug.log*
yarn-error.log*
.yarn/cache
.yarn/unplugged
.yarn/build-state.yml
.yarn/install-state.gz
.pnp.*

# pnpm
pnpm-lock.yaml

# =================================
# Testing
# =================================
coverage/
*.lcov
.nyc_output/
*.coverage
.coverage.*
htmlcov/
.pytest_cache/
.tox/
nosetests.xml
coverage.xml
*.cover

# =================================
# Miscellaneous
# =================================

# Temporary files
*.tmp
*.temp
*.bak
*.backup
*.swp
*.swo
*.swn
*.orig
*.rej
*~
.~*

# Logs
logs/
*.log
*.pid
*.seed
*.pid.lock

# TypeScript
*.tsbuildinfo
tsconfig.tsbuildinfo

# Security and secrets
*.key
*.pem
*.crt
*.p12
secrets/
credentials.json
service-account.json

# Database dumps
*.dump
*.sql
*.sqlite
*.sqlite3
*.db

# Compressed files
*.zip
*.tar
*.tar.gz
*.rar
*.7z

# Local configuration
local.config.js
local.settings.json
*.local.*

# Build artifacts
*.map
*.min.js
*.min.css

# Scripts temporários
frontend/dev.cmd
frontend/run-dev.ps1
frontend/.npmrc

# Cache directories
.cache/
.sass-cache/
.nuxt/
.next/
.serverless/
.fusebox/
.dynamodb/
.tern-port
.vscode-test/

# Python virtual environments específicos
LipeNet-env/
lipenet-venv/

# Husky
.husky/_/