==================================================
== AGENDA DE 90 DIAS - PROJETO LIPENET ==
==================================================

OBJETIVO FINAL: Criar uma aplicação web inteligente onde usuários podem postar fotos, que são automaticamente analisadas e tagueadas por IA, permitindo uma busca semântica e intuitiva.

---
### MÊS 1: A FUNDAÇÃO E O PRODUTO MÍNIMO VIÁVEL (MVP) ###
---
--> Objetivo do Mês: Ter um app web funcional que gera legendas automáticas para fotos enviadas.

**SEMANA 1: Preparação do Ambiente e Ferramentas Essenciais**
- [✅] Dia 1: Fundação do Projeto (Pasta, Git, GitHub, Venv).
- [✅] Dia 2: Ferramentas Base (Instalar e testar Pillow e Requests).
- [ ] Dia 3: Primeiro Contato com IA (Instalar Transformers/Torch, rodar script de Image Captioning local).
- [ ] Dia 4: Prevenção de Erros Futuros (Criar requirements.txt, configurar .env e .gitignore).
- [✅] Dias 5-7: Revisão e Estudo (Revisar conceitos de Git, venv, API, e o que é um modelo pré-treinado).

**SEMANA 2: Estrutura do Projeto Django**
- [ ] Dia 8: Iniciar Projeto Django (Comandos startproject e startapp).
- [ ] Dia 9: Modelos de Dados (Criar o model 'Photo' com ImageField e TextField no models.py).
- [ ] Dia 10: Migrações e Admin (Rodar makemigrations/migrate, registrar o model no admin).
- [ ] Dias 11-14: Upload Funcional (Criar a view, form e template para upload de fotos).

**SEMANAS 3-4: A Primeira Mágica - Integrando a IA**
- [ ] Dias 15-18: Conectar Django e IA (Mover a lógica do script do Dia 3 para a view de upload).
- [ ] Dias 19-21: Salvar Resultados (Salvar a legenda gerada pela IA no banco de dados junto com a foto).
- [ ] Dias 22-25: Autenticação de Usuário (Implementar login/registro do Django, associar fotos a usuários).
- [ ] Dias 26-30: Galeria de Exibição (Criar uma página que mostra as fotos do usuário e suas legendas geradas).

---
### MÊS 2: AUMENTANDO A INTELIGÊNCIA DA APLICAÇÃO ###
---
--> Objetivo do Mês: Extrair metadados ricos das imagens: tags de objetos, cores e identidade de pessoas.

**SEMANAS 5-6: Detecção de Cenas, Objetos e Cores**
- [ ] Dias 31-35: Tags de Objetos (Usar um modelo de 'Object Detection' do Hugging Face para extrair tags).
- [ ] Dias 36-38: Modelos de Tags (Criar o model 'Tag' e a relação ManyToMany com 'Photo').
- [ ] Dias 39-42: Detecção de Cores (Estudar e implementar um script com OpenCV para extrair a cor dominante da roupa de uma pessoa na foto).
- [ ] Dias 43-45: Salvar Cores (Criar model 'ColorTag' e salvar as cores detectadas).

**SEMANAS 7-8: Reconhecimento de Pessoas**
- [ ] Dias 46-50: Estudo de `face_recognition` (Instalar e testar a biblioteca em um script separado).
- [ ] Dias 51-53: Modelo de Pessoas (Criar o model 'Person' com nome e campo para o 'encoding' do rosto).
- [ ] Dias 54-60: Lógica de Reconhecimento (Implementar o fluxo na view de upload: detectar rosto, gerar encoding, comparar com existentes, salvar associação).

---
### MÊS 3: A EXPERIÊNCIA DO USUÁRIO E FINALIZAÇÃO ###
---
--> Objetivo do Mês: Construir a busca inteligente, polir o app, fazer o deploy e escrever a documentação.

**SEMANAS 9-10: A Busca Inteligente**
- [ ] Dias 61-65: Backend da Busca (Criar a view de busca que recebe um texto).
- [ ] Dias 66-70: Lógica de Filtragem (Implementar a lógica com 'Q objects' para filtrar fotos por tags, cores e pessoas mencionadas no texto).
- [ ] Dias 71-75: Frontend da Busca (Criar o template com a barra de pesquisa e a página de resultados).

**SEMANAS 11-12: Polimento, Deploy e Documentação**
- [ ] Dias 76-80: UI/UX (Usar um framework CSS como Bootstrap para melhorar a aparência, adicionar feedback de 'loading').
- [ ] Dias 81-85: Deploy (Estudar e realizar o deploy da aplicação em uma plataforma como PythonAnywhere ou Heroku).
- [ ] Dias 86-90: Documentação e Apresentação (Escrever o relatório do TCC, detalhando a arquitetura, ferramentas e desafios. Preparar a apresentação final).

==================================================